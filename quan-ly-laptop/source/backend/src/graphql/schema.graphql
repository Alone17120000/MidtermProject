# src/graphql/schema.graphql

# Định nghĩa kiểu dữ liệu cho Laptop
type Laptop {
  id: ID!          # ID duy nhất, kiểu ID là chuỗi (string) trong GraphQL nhưng thường map với _id của MongoDB
  name: String!    # Dấu ! nghĩa là trường này bắt buộc (non-nullable)
  configuration: String!
  pricePerHour: Float! # Sử dụng Float cho số thực, hoặc Int nếu giá luôn là số nguyên
  createdAt: String    # Thêm trường timestamp nếu muốn trả về
  updatedAt: String    # Thêm trường timestamp nếu muốn trả về
}

type Query {
  # Query laptops ĐÃ CẬP NHẬT
  laptops(
    page: Int = 1             # Trang hiện tại, mặc định là 1
    limit: Int = 5            # Số lượng item mỗi trang, mặc định 5 (dễ test)
    sortBy: LaptopSortBy = NAME # Sắp xếp theo trường nào, mặc định là NAME
    sortOrder: SortOrder = ASC  # Thứ tự sắp xếp, mặc định là ASC
    filter: LaptopFilterInput    # Bộ lọc (tùy chọn)
    search: String              # Chuỗi tìm kiếm theo tên (tùy chọn)
  ): LaptopsPage # <--- Kiểu trả về mới

  # Lấy thông tin một laptop theo ID
  laptop(id: ID!): Laptop # Truyền vào id bắt buộc, trả về một Laptop hoặc null nếu không tìm thấy
}

# Định nghĩa input type cho việc tạo mới Laptop (gom các trường cần thiết)
input CreateLaptopInput {
  name: String!
  configuration: String!
  pricePerHour: Float!
  imageUrl: String 
}

# Định nghĩa input type cho việc cập nhật Laptop (các trường đều là tùy chọn)
input UpdateLaptopInput {
  name: String
  configuration: String
  pricePerHour: Float
  imageUrl: String
}

# Định nghĩa các thay đổi dữ liệu (thêm, sửa, xóa)
type Mutation {
  # Tạo một laptop mới
  createLaptop(input: CreateLaptopInput!): Laptop! # Nhận đầu vào là CreateLaptopInput, trả về Laptop mới được tạo

  # Cập nhật một laptop theo ID
  updateLaptop(id: ID!, input: UpdateLaptopInput!): Laptop # Nhận id và dữ liệu cập nhật, trả về Laptop đã cập nhật (hoặc null nếu không tìm thấy)

  # Xóa một laptop theo ID
  deleteLaptop(id: ID!): Laptop # Nhận id, trả về Laptop đã bị xóa (để xác nhận, hoặc có thể trả về kiểu khác như Boolean)
}

type Laptop {
  id: ID!
  name: String!
  configuration: String!
  pricePerHour: Float!
  imageUrl: String    # <--- THÊM DÒNG NÀY (kiểu String, cho phép null)
  createdAt: String
  updatedAt: String
}
# Enum cho các trường có thể sắp xếp
enum LaptopSortBy {
  NAME
  PRICE_PER_HOUR
}

# Enum cho thứ tự sắp xếp
enum SortOrder {
  ASC  # Tăng dần
  DESC # Giảm dần
}

# Input Type cho bộ lọc
input LaptopFilterInput {
  minPrice: Float # Giá tối thiểu (tùy chọn)
  maxPrice: Float # Giá tối đa (tùy chọn)
}

# Kiểu trả về mới cho query laptops (bao gồm danh sách và tổng số lượng)
type LaptopsPage {
  laptops: [Laptop!]! # Danh sách laptop của trang hiện tại
  totalCount: Int!     # Tổng số laptop khớp với điều kiện lọc/tìm kiếm
}